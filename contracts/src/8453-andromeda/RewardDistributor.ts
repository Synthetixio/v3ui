// !!! DO NOT EDIT !!! Automatically generated file

export const address = null;
export const abi = [
  'error Unauthorized(address sender)',
  'function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint256 start, uint256 duration)',
  'function initialize(address rewardManager, address token_, string name_)',
  'function name() view returns (string)',
  'function payout(uint128, uint128, address, address sender, uint256 amount) returns (bool)',
  'function supportsInterface(bytes4 interfaceId) view returns (bool)',
  'function token() view returns (address)',
];

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface RewardDistributorInterface extends utils.Interface {
  functions: {
    'distributeRewards(uint128,address,uint256,uint256,uint256)': FunctionFragment;
    'initialize(address,address,string)': FunctionFragment;
    'name()': FunctionFragment;
    'payout(uint128,uint128,address,address,uint256)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'token()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'distributeRewards'
      | 'initialize'
      | 'name'
      | 'payout'
      | 'supportsInterface'
      | 'token'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'distributeRewards',
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string, string]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'payout',
    values: [BigNumberish, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'distributeRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;

  events: {};
}

export interface RewardDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    distributeRewards(
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      rewardManager: string,
      token_: string,
      name_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    payout(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      sender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  distributeRewards(
    poolId: BigNumberish,
    collateralType: string,
    amount: BigNumberish,
    start: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    rewardManager: string,
    token_: string,
    name_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  payout(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: string,
    sender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    distributeRewards(
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      rewardManager: string,
      token_: string,
      name_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    payout(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    distributeRewards(
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      rewardManager: string,
      token_: string,
      name_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    payout(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      sender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    distributeRewards(
      poolId: BigNumberish,
      collateralType: string,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      rewardManager: string,
      token_: string,
      name_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payout(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      sender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

