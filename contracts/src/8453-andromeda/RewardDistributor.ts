// !!! DO NOT EDIT !!! Automatically generated file

export const address = null;
export const abi = [
  'constructor(address rewardManager_, uint128 poolId_, address collateralType_, address payoutToken_, uint8 payoutTokenDecimals_, string name_)',
  'function SYSTEM_PRECISION() view returns (uint256)',
  'function collateralType() view returns (address)',
  'function distributeRewards(uint128 poolId_, address collateralType_, uint256 amount_, uint64 start_, uint32 duration_)',
  'function name() view returns (string)',
  'function onPositionUpdated(uint128, uint128, address, uint256)',
  'function payout(uint128, uint128 poolId_, address collateralType_, address payoutTarget_, uint256 payoutAmount_) returns (bool)',
  'function payoutToken() view returns (address)',
  'function poolId() view returns (uint128)',
  'function precision() view returns (uint256)',
  'function rewardManager() view returns (address)',
  'function rewardsAmount() view returns (uint256)',
  'function setShouldFailPayout(bool shouldFailPayout_)',
  'function shouldFailPayout() view returns (bool)',
  'function supportsInterface(bytes4 interfaceId) view returns (bool)',
  'function token() view returns (address)',
  'error FailedTransfer(address from, address to, uint256 value)',
  'error InvalidParameter(string parameter, string reason)',
  'error NotEnoughBalance(uint256 amountRequested, uint256 currentBalance)',
  'error NotEnoughRewardsLeft(uint256 amountRequested, uint256 amountLeft)',
  'error Unauthorized(address addr)',
];

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface RewardDistributorInterface extends utils.Interface {
  functions: {
    'SYSTEM_PRECISION()': FunctionFragment;
    'collateralType()': FunctionFragment;
    'distributeRewards(uint128,address,uint256,uint64,uint32)': FunctionFragment;
    'name()': FunctionFragment;
    'onPositionUpdated(uint128,uint128,address,uint256)': FunctionFragment;
    'payout(uint128,uint128,address,address,uint256)': FunctionFragment;
    'payoutToken()': FunctionFragment;
    'poolId()': FunctionFragment;
    'precision()': FunctionFragment;
    'rewardManager()': FunctionFragment;
    'rewardsAmount()': FunctionFragment;
    'setShouldFailPayout(bool)': FunctionFragment;
    'shouldFailPayout()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'token()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'SYSTEM_PRECISION'
      | 'collateralType'
      | 'distributeRewards'
      | 'name'
      | 'onPositionUpdated'
      | 'payout'
      | 'payoutToken'
      | 'poolId'
      | 'precision'
      | 'rewardManager'
      | 'rewardsAmount'
      | 'setShouldFailPayout'
      | 'shouldFailPayout'
      | 'supportsInterface'
      | 'token'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'SYSTEM_PRECISION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'collateralType', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'distributeRewards',
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'onPositionUpdated',
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'payout',
    values: [BigNumberish, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'payoutToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'poolId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'precision', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardsAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setShouldFailPayout', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'shouldFailPayout', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'SYSTEM_PRECISION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'collateralType', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'distributeRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onPositionUpdated', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'payoutToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'poolId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'precision', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardsAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setShouldFailPayout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'shouldFailPayout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;

  events: {};
}

export interface RewardDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SYSTEM_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralType(overrides?: CallOverrides): Promise<[string]>;

    distributeRewards(
      poolId_: BigNumberish,
      collateralType_: string,
      amount_: BigNumberish,
      start_: BigNumberish,
      duration_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onPositionUpdated(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    payout(
      arg0: BigNumberish,
      poolId_: BigNumberish,
      collateralType_: string,
      payoutTarget_: string,
      payoutAmount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    payoutToken(overrides?: CallOverrides): Promise<[string]>;

    poolId(overrides?: CallOverrides): Promise<[BigNumber]>;

    precision(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardManager(overrides?: CallOverrides): Promise<[string]>;

    rewardsAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    setShouldFailPayout(
      shouldFailPayout_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    shouldFailPayout(overrides?: CallOverrides): Promise<[boolean]>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  SYSTEM_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  collateralType(overrides?: CallOverrides): Promise<string>;

  distributeRewards(
    poolId_: BigNumberish,
    collateralType_: string,
    amount_: BigNumberish,
    start_: BigNumberish,
    duration_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  onPositionUpdated(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: string,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  payout(
    arg0: BigNumberish,
    poolId_: BigNumberish,
    collateralType_: string,
    payoutTarget_: string,
    payoutAmount_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  payoutToken(overrides?: CallOverrides): Promise<string>;

  poolId(overrides?: CallOverrides): Promise<BigNumber>;

  precision(overrides?: CallOverrides): Promise<BigNumber>;

  rewardManager(overrides?: CallOverrides): Promise<string>;

  rewardsAmount(overrides?: CallOverrides): Promise<BigNumber>;

  setShouldFailPayout(
    shouldFailPayout_: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  shouldFailPayout(overrides?: CallOverrides): Promise<boolean>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    SYSTEM_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    collateralType(overrides?: CallOverrides): Promise<string>;

    distributeRewards(
      poolId_: BigNumberish,
      collateralType_: string,
      amount_: BigNumberish,
      start_: BigNumberish,
      duration_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    onPositionUpdated(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    payout(
      arg0: BigNumberish,
      poolId_: BigNumberish,
      collateralType_: string,
      payoutTarget_: string,
      payoutAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    payoutToken(overrides?: CallOverrides): Promise<string>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    precision(overrides?: CallOverrides): Promise<BigNumber>;

    rewardManager(overrides?: CallOverrides): Promise<string>;

    rewardsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    setShouldFailPayout(shouldFailPayout_: boolean, overrides?: CallOverrides): Promise<void>;

    shouldFailPayout(overrides?: CallOverrides): Promise<boolean>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    SYSTEM_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    collateralType(overrides?: CallOverrides): Promise<BigNumber>;

    distributeRewards(
      poolId_: BigNumberish,
      collateralType_: string,
      amount_: BigNumberish,
      start_: BigNumberish,
      duration_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onPositionUpdated(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    payout(
      arg0: BigNumberish,
      poolId_: BigNumberish,
      collateralType_: string,
      payoutTarget_: string,
      payoutAmount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    payoutToken(overrides?: CallOverrides): Promise<BigNumber>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    precision(overrides?: CallOverrides): Promise<BigNumber>;

    rewardManager(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsAmount(overrides?: CallOverrides): Promise<BigNumber>;

    setShouldFailPayout(
      shouldFailPayout_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    shouldFailPayout(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SYSTEM_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeRewards(
      poolId_: BigNumberish,
      collateralType_: string,
      amount_: BigNumberish,
      start_: BigNumberish,
      duration_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onPositionUpdated(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    payout(
      arg0: BigNumberish,
      poolId_: BigNumberish,
      collateralType_: string,
      payoutTarget_: string,
      payoutAmount_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    payoutToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    precision(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setShouldFailPayout(
      shouldFailPayout_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    shouldFailPayout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

