name = "synthetix-local"
version = "1"
description = "Synthetix V3 Local deployment"

[setting.user]
defaultValue = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"

[setting.first_pool_id]
defaultValue = "1"

[setting.second_pool_id]
defaultValue = "2"

[setting.test_user_account_id]
defaultValue = "1"

[provision.snx_token]
source = "mintable-token:1.1"
options.symbol = "SNX"
options.name = "Snax"

[provision.chainlink_mock_for_snx]
source = "chainlink-mock-v3-aggregator:1.0"
options.initialAnswer = "<%= parseEther('2') %>"

[provision.synthetix]
source = "synthetix:3.3.4"
options.owner = "<%= settings.user %>"

[invoke.register_chainlink_price_node_for_snx]
target = ["synthetix.oracle_manager.Proxy"]
func = "registerNode"
args = [
    3, # Type for Chainlink aggregator
    "<%= defaultAbiCoder.encode(['address', 'uint256', 'uint8'], [imports.chainlink_mock_for_snx.contracts.MockV3Aggregator.address, 0, 18]) %>",
    [],
]
extra.snxOracleNodeId.event = "NodeRegistered"
extra.snxOracleNodeId.arg = 0
depends = ["provision.synthetix", "provision.chainlink_mock_for_snx"]

[invoke.configure_snx_token_collateral]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "configureCollateral"
args = [
    { tokenAddress = "<%= imports.snx_token.contracts.MintableToken.address %>", oracleNodeId = "<%= extras.snxOracleNodeId %>", issuanceRatioD18 = "<%= parseEther('2') %>", liquidationRatioD18 = "<%= parseEther('1.5') %>", liquidationRewardD18 = "<%= parseEther('1') %>", minDelegationD18 = "<%= parseEther('1') %>", depositingEnabled = true },
]
depends = ["invoke.register_chainlink_price_node_for_snx", "provision.snx_token"]

[invoke.allow_all_to_register_market]
target = ["synthetix.CoreProxy"]
fromCall.func = "owner"
func = "setFeatureFlagAllowAll"
args = ["<%= formatBytes32String('registerMarket') %>", true]
depends = ["provision.synthetix"]

[invoke.allow_all_to_create_pool]
target = ["synthetix.CoreProxy"]
fromCall.func = "owner"
func = "setFeatureFlagAllowAll"
args = ["<%= formatBytes32String('createPool') %>", true]
depends = ["provision.synthetix"]

[invoke.create_first_pool]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "createPool"
args = ["<%= settings.first_pool_id %>", "<%= settings.user %>"]
depends = ["invoke.allow_all_to_create_pool"]

[invoke.configure_first_pool_name]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setPoolName"
args = ["<%= settings.first_pool_id %>", "First Local Pool"]
depends = ["invoke.create_first_pool"]

# Set pool as preferred
[invoke.configure_first_pool_as_preferred_pool]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setPreferredPool"
args = ["<%= settings.first_pool_id %>"]
depends = ["invoke.create_first_pool"]

[invoke.test_user_mints_10k_snx]
target = ["snx_token.MintableToken"]
func = "mint"
args = ["<%= parseEther('10000') %>", "<%= settings.user %>"]
depends = ["provision.snx_token"]

[invoke.test_user_creates_account]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "createAccount(uint128)"
args = ["<%= settings.test_user_account_id %>"]
extras.testUserAccountId.event = "AccountCreated"
extras.testUserAccountId.arg = 0
depends = ["provision.synthetix"]

[invoke.test_user_approves_10k_snx_for_CoreProxy_to_spend]
target = ["snx_token.MintableToken"]
from = "<%= settings.user %>"
func = "approve"
args = [
    "<%= imports.synthetix.contracts.CoreProxy.address %>",
    "<%= parseEther('10000') %>",
]
depends = ["provision.synthetix", "invoke.test_user_mints_10k_snx"]

[invoke.test_user_deposits_1k_snx]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "deposit"
args = [
    "<%= settings.test_user_account_id %>",
    "<%= imports.snx_token.contracts.MintableToken.address %>",
    "<%= parseEther('1000') %>",
]
depends = ["invoke.test_user_creates_account", "invoke.test_user_approves_10k_snx_for_CoreProxy_to_spend"]

[invoke.test_user_delegates_900_snx]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "delegateCollateral"
args = [
    "<%= settings.test_user_account_id %>",
    "<%= settings.first_pool_id %>",
    "<%= imports.snx_token.contracts.MintableToken.address %>",
    "<%= parseEther('900') %>",
    "<%= parseEther('1') %>",
]
depends = ["invoke.test_user_deposits_1k_snx"]

[invoke.test_user_borrows_300_susd]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "mintUsd"
args = [
    "<%= settings.test_user_account_id %>",
    "<%= settings.first_pool_id %>",
    "<%= imports.snx_token.contracts.MintableToken.address %>",
    "<%= parseEther('300') %>",
]
depends = ["invoke.test_user_delegates_900_snx"]

[invoke.configure_withdraw_timeout_to_be_0]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setConfig"
args = [
    "<%= formatBytes32String('accountTimeoutWithdraw') %>",
    "<%= hexZeroPad(hexlify(0), 32) %>",
]
depends = ["provision.synthetix"]


[invoke.set_minimum_liquidity_ratio_to_be_2]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setMinLiquidityRatio(uint256)"
args = ["<%= parseEther('2') %>"]
depends = ["provision.synthetix"]

[provision.spot_market]
source = "synthetix-spot-market:3.3.4"
options.coreProxyOwner = "<%= settings.user %>"
options.owner = "<%= settings.user %>"
options.synthetixPackage = "synthetix:3.3.4"
depends = ["provision.synthetix"]

[invoke.create_snx_synth]
target = ["spot_market.SpotMarketProxy"]
func = "createSynth"
from = "<%= settings.user %>"
args = ["Synthetic SNX Token", "sSNX", "<%= settings.user %>"]
extra.snxSynthMarketId.event = "SynthRegistered"
extra.snxSynthMarketId.arg = 0
depends = ["provision.spot_market"]

[invoke.set_oracle_node_for_snx_price_data]
target = ["spot_market.SpotMarketProxy"]
func = "updatePriceData"
from = "<%= settings.user %>"
args = [
    "<%= extras.snxSynthMarketId %>",
    "<%= extras.snxOracleNodeId %>",
    "<%= extras.snxOracleNodeId %>",
]
depends = ['invoke.create_snx_synth', 'invoke.register_chainlink_price_node_for_snx']

[invoke.add_atomic_fixed_1pc_fee_for_snx]
target = ["spot_market.SpotMarketProxy"]
func = "setAtomicFixedFee"
from = "<%= settings.user %>"
args = ["<%= extras.snxSynthMarketId %>", "<%= parseEther('0.01') %>"]
depends = ['invoke.create_snx_synth']

[invoke.allow_snx_synth_market_to_deposit_unlimited_snx]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "configureMaximumMarketCollateral"
args = [
    "<%= extras.snxSynthMarketId %>",
    "<%= imports.snx_token.contracts.MintableToken.address %>",
    "<%= MaxUint256 %>",
]
depends = ['invoke.create_snx_synth', 'provision.snx_token']

[invoke.initialise_snx_synth_wrapper_with_unlimited_cap]
target = ["spot_market.SpotMarketProxy"]
func = "setWrapper"
from = "<%= settings.user %>"
args = [
    "<%= extras.snxSynthMarketId %>",
    "<%= imports.snx_token.contracts.MintableToken.address %>",
    "<%= MaxUint256 %>",
]
depends = [
    'invoke.allow_snx_synth_market_to_deposit_unlimited_snx',
    # We depend on test_user_borrows_300_susd to make sure there is two tx in between minting and withdrawing
    "invoke.test_user_borrows_300_susd",
]

[invoke.configure_first_pool]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setPoolConfiguration"
args = [
    "<%= settings.first_pool_id %>",
    [
        { marketId = "<%= extras.snxSynthMarketId %>", weightD18 = "1", maxDebtShareValueD18 = "<%= parseEther('2') %>" },
    ],
]
depends = [
    "invoke.create_first_pool",
    "invoke.set_oracle_node_for_snx_price_data",
    # We depend on test_user_borrows_300_susd to make sure there is two tx in between minting and withdrawing
    "invoke.test_user_borrows_300_susd",
]

# Withdraw some of the minted stablecoins
[invoke.withdraw_100_susd_by_test_user]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "withdraw"
args = [
    "<%= settings.test_user_account_id %>",
    "<%= imports.synthetix.contracts.USDProxy.address %>",
    "<%= parseEther('100') %>",
]
depends = [
    "invoke.approve_second_pool",
    # "invoke.test_user_borrows_300_susd", # this is what I'd like to depend on...
    # But we need to make sure at two tx exists in between minting and withdrawing,
    "invoke.initialise_snx_synth_wrapper_with_unlimited_cap",
    "invoke.configure_first_pool",
    # otherwise we run into `AccountActivityTimeoutPending` (with 1sec diff) even though AccountTimeoutWithdraw is set to 0
]

[invoke.configure_withdraw_timeout_to_be_1d_again]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setConfig"
args = [
    "<%= formatBytes32String('accountTimeoutWithdraw') %>",
    "<%= hexZeroPad(hexlify(86400), 32) %>",
]
depends = ["invoke.withdraw_100_susd_by_test_user"]

# Create another pool
[invoke.create_second_pool]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "createPool"
args = ["<%= settings.second_pool_id %>", "<%= settings.user %>"]
depends = ["invoke.allow_all_to_create_pool"]

[invoke.configure_second_pool_name]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setPoolName"
args = ["<%= settings.second_pool_id %>", "Another Pool"]
depends = ["invoke.create_second_pool"]

# Set pool as preferred
[invoke.approve_second_pool]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "addApprovedPool"
args = ["<%= settings.second_pool_id %>"]
depends = ["invoke.create_second_pool"]
