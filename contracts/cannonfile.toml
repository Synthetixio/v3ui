name = "synthetix-local"
version = "0.0.1"
description = "Synthetix V3 Local deployment"

[setting.user]
defaultValue = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"

[setting.synthetix]
defaultValue = "synthetix:3.3.4"

[setting.spotMarket]
defaultValue = "synthetix-spot-market:3.3.4"

[setting.defaultPoolId]
defaultValue = "1"

[setting.anotherPoolId]
defaultValue = "2"

[setting.accountId]
defaultValue = "1"

# In case we ever want to use generic Multicall
[provision.Multicall]
source = "multicall:3.0.0"

# Provision collateral token
[provision.collateralToken]
source = "mintable-token:1.1"
options.symbol = "SNX"
options.name = "Snax"

# Provision Chainlink mock for collateral token ($2)
[provision.collateralChainlinkMock]
source = "chainlink-mock-v3-aggregator:1.0"
options.initialAnswer = "<%= parseEther('2') %>"

# Provision Synthetix core and oracle manager
[provision.synthetix]
source = "<%= settings.synthetix %>"
options.owner = "<%= settings.user %>"

# Register oracle manager node for collateral token
[invoke.registerCollateralPriceNode]
target = ["synthetix.oracle_manager.Proxy"]
func = "registerNode"
args = [
    3, # Type for Chainlink aggregator
    "<%= defaultAbiCoder.encode(['address', 'uint256', 'uint8'], [imports.collateralChainlinkMock.contracts.MockV3Aggregator.address, 0, 18]) %>",
    [
    ],
]
extra.tkn_oracle_id.event = "NodeRegistered"
extra.tkn_oracle_id.arg = 0
depends = ["provision.synthetix", "provision.collateralChainlinkMock"]

# Configure collateral token as collateral for core
[invoke.configureTknCollateral]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "configureCollateral"
args = [
    { tokenAddress = "<%= imports.collateralToken.contracts.MintableToken.address %>", oracleNodeId = "<%= extras.tkn_oracle_id %>", issuanceRatioD18 = "<%= parseEther('2') %>", liquidationRatioD18 = "<%= parseEther('1.5') %>", liquidationRewardD18 = "<%= parseEther('1') %>", minDelegationD18 = "<%= parseEther('1') %>", depositingEnabled = true },
]
depends = ["invoke.registerCollateralPriceNode", "provision.collateralToken"]

[invoke.allowAllRegisterMarket]
target = ["synthetix.CoreProxy"]
fromCall.func = "owner"
func = "setFeatureFlagAllowAll"
args = ["<%= formatBytes32String('registerMarket') %>", true]
depends = ["provision.synthetix"]

[invoke.allowAllCreatePool]
target = ["synthetix.CoreProxy"]
fromCall.func = "owner"
func = "setFeatureFlagAllowAll"
args = ["<%= formatBytes32String('createPool') %>", true]
depends = ["provision.synthetix"]

# Create pool
[invoke.create_default_pool]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "createPool"
args = ["<%= settings.defaultPoolId %>", "<%= settings.user %>"]
depends = ["invoke.allowAllCreatePool"]

[invoke.configure_default_pool_name]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setPoolName"
args = ["<%= settings.defaultPoolId %>", "First Local Pool"]
depends = ["invoke.create_default_pool"]

# Set pool as preferred
[invoke.configure_default_pool_as_preferred_pool]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setPreferredPool"
args = ["<%= settings.defaultPoolId %>"]
depends = ["invoke.create_default_pool"]

# User receives collateral token
[invoke.mintCollateral]
target = ["collateralToken.MintableToken"]
func = "mint"
args = ["<%= parseEther('10000') %>", "<%= settings.user %>"]
depends = ["provision.collateralToken"]

# User creates account
[invoke.createAccount]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "createAccount(uint128)"
args = ["<%= settings.accountId %>"]
extras.accountId.event = "AccountCreated"
extras.accountId.arg = 0
depends = ["provision.synthetix"]

# User approves transfer of collateral
[invoke.approveDeposit]
target = ["collateralToken.MintableToken"]
from = "<%= settings.user %>"
func = "approve"
args = [
    "<%= imports.synthetix.contracts.CoreProxy.address %>",
    "<%= parseEther('10000') %>",
]
depends = ["provision.synthetix", "invoke.mintCollateral"]

# User deposits collateral token
[invoke.depositCollateral]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "deposit"
args = [
    "<%= settings.accountId %>",
    "<%= imports.collateralToken.contracts.MintableToken.address %>",
    "<%= parseEther('1000') %>",
]
depends = ["invoke.createAccount", "invoke.approveDeposit"]

# User delegates to pool
[invoke.delegateCollateral]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "delegateCollateral"
args = [
    "<%= settings.accountId %>",
    "<%= settings.defaultPoolId %>",
    "<%= imports.collateralToken.contracts.MintableToken.address %>",
    "<%= parseEther('1000') %>",
    "<%= parseEther('1') %>",
]
depends = ["invoke.depositCollateral"]

# User mints quarter of collateral value
[invoke.mintStablecoins]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "mintUsd"
args = [
    "<%= settings.accountId %>",
    "<%= settings.defaultPoolId %>",
    "<%= imports.collateralToken.contracts.MintableToken.address %>",
    "<%= parseEther('500') %>",
]
depends = ["invoke.delegateCollateral"]

# Set withdrawal timeout to 0, this will be reset later
[invoke.setAccountTimeoutWithdraw]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setConfig"
args = [
    "<%= formatBytes32String('accountTimeoutWithdraw') %>",
    "<%= hexZeroPad(hexlify(0), 32) %>",
]
depends = ["provision.synthetix"]


# Set the minimum liquidity ratio
[invoke.setMinimumLiquidityRatio]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setMinLiquidityRatio(uint256)"
args = ["<%= parseEther('2') %>"]
depends = ["provision.synthetix"]

# Provision the spot market factory
[provision.spotMarket]
source = "<%= settings.spotMarket %>"
options.coreProxyOwner = "<%= settings.user %>"
options.owner = "<%= settings.user %>"
options.synthetixPackage = "<%= settings.synthetix %>"
depends = ["provision.synthetix"]

# Create snxTKN Synth
[invoke.createSynth]
target = ["spotMarket.SpotMarketProxy"]
func = "createSynth"
from = "<%= settings.user %>"
args = ["Synthetic Token", "snxTKN", "<%= settings.user %>"]
extra.synthMarketId.event = "SynthRegistered"
extra.synthMarketId.arg = 0
depends = ["provision.spotMarket"]

# Set oracle nodes for snxTKN price
[invoke.updateSynthPriceData]
target = ["spotMarket.SpotMarketProxy"]
func = "updatePriceData"
from = "<%= settings.user %>"
args = [
    "<%= extras.synthMarketId %>",
    "<%= extras.tkn_oracle_id %>",
    "<%= extras.tkn_oracle_id %>",
]
depends = ['invoke.createSynth', 'invoke.registerCollateralPriceNode']

# Add a 1% fixed feed on atomic exchanges
[invoke.addAtomicFixedFee]
target = ["spotMarket.SpotMarketProxy"]
func = "setAtomicFixedFee"
from = "<%= settings.user %>"
args = ["<%= extras.synthMarketId %>", "<%= parseEther('0.01') %>"]
depends = ['invoke.createSynth']

# Allow snxTKN market to deposit unlimited TKN for wrappers
[invoke.setMarketCollateralSupplyCap]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "configureMaximumMarketCollateral"
args = [
    "<%= extras.synthMarketId %>",
    "<%= imports.collateralToken.contracts.MintableToken.address %>",
    "<%= MaxUint256 %>",
]
depends = ['invoke.createSynth', 'provision.collateralToken']

# Initialize wrapper functionality on snxTKN market with an unlimited cap
[invoke.initializeWrapper]
target = ["spotMarket.SpotMarketProxy"]
func = "setWrapper"
from = "<%= settings.user %>"
args = [
    "<%= extras.synthMarketId %>",
    "<%= imports.collateralToken.contracts.MintableToken.address %>",
    "<%= MaxUint256 %>",
]
depends = [
    'invoke.setMarketCollateralSupplyCap',
    "invoke.mintStablecoins",              # We depend on mintStablecoins to make sure there is two tx in between minting and withdrawing
]

# Set Pool Configuration
[invoke.setPoolConfiguration]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setPoolConfiguration"
args = [
    "<%= settings.defaultPoolId %>",
    [
        { marketId = "<%= extras.synthMarketId %>", weightD18 = "1", maxDebtShareValueD18 = "<%= parseEther('2') %>" },
    ],
]
depends = [
    "invoke.create_default_pool",
    "invoke.updateSynthPriceData",
    "invoke.mintStablecoins",      # We depend on mintStablecoins to make sure there is two tx in between minting and withdrawing
]
# Withdraw some of the minted stablecoins
[invoke.withdrawStablecoins]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "withdraw"
args = [
    "<%= settings.accountId %>",
    "<%= imports.synthetix.contracts.USDProxy.address %>",
    "<%= parseEther('100') %>",
]
depends = [
    "invoke.approveAnotherPool",
    # "invoke.mintStablecoins", # this is what I'd like to depend on...
    "invoke.initializeWrapper",    # But we need to make sure at two tx exists in between minting and withdrawing,
    "invoke.setPoolConfiguration", # otherwise we run into `AccountActivityTimeoutPending` (with 1sec diff) even though AccountTimeoutWithdraw is set to 0
]

# Reset withdrawal timeout to default 86400
[invoke.resetAccountTimeoutWithdraw]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setConfig"
args = [
    "<%= formatBytes32String('accountTimeoutWithdraw') %>",
    "<%= hexZeroPad(hexlify(86400), 32) %>",
]
depends = ["invoke.withdrawStablecoins"]

# Create another pool
[invoke.createAnotherPool]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "createPool"
args = ["<%= settings.anotherPoolId %>", "<%= settings.user %>"]
depends = ["invoke.allowAllCreatePool"]

[invoke.setAnotherPoolName]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "setPoolName"
args = ["<%= settings.anotherPoolId %>", "Another Pool"]
depends = ["invoke.createAnotherPool"]

# Set pool as preferred
[invoke.approveAnotherPool]
target = ["synthetix.CoreProxy"]
from = "<%= settings.user %>"
func = "addApprovedPool"
args = ["<%= settings.anotherPoolId %>"]
depends = ["invoke.createAnotherPool"]
