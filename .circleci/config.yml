version: 2.1

parameters:
  node-version:
    type: string
    default: '18.18.0'

  cypress-version:
    type: string
    default: '13.3.3'

commands:
  yarn-install:
    steps:
      - run: yarn install --immutable --immutable-cache

  install-foundry:
    steps:
      - run:
          name: Install foundry used for cannon and e2e tests
          environment:
            SHELL: /bin/bash
          command: |-
            apt update && apt install --yes curl
            curl -L https://foundry.paradigm.xyz | bash
            export PATH="$PATH:$HOME/.foundry/bin"
            echo export PATH="$PATH:$HOME/.foundry/bin" > $BASH_ENV
            foundryup

  ipfs-deploy:
    parameters:
      source-dir:
        type: string
      ipfs-api:
        type: string
      ipns-key:
        type: string
      ipfs-cluster-api:
        type: string
    steps:
      - run:
          name: 'Install IPFS'
          command: |
            LATEST_VERSION=$(curl -sSL https://dist.ipfs.tech/go-ipfs/versions | tail -n 1)
            LATEST_VERSION_NUMBER=${LATEST_VERSION#*v}
            DOWNLOAD_URL="https://dist.ipfs.tech/go-ipfs/${LATEST_VERSION}/go-ipfs_${LATEST_VERSION}_linux-amd64.tar.gz"
            echo "DOWNLOAD_URL=$DOWNLOAD_URL"
            curl -sSL -o ipfs.tar.gz $DOWNLOAD_URL
            tar -xzf ipfs.tar.gz
            sudo cp -f ./go-ipfs/ipfs /usr/local/bin/
            ipfs init

      - run:
          command: ipfs daemon
          background: true
      - run:
          name: 'Wait for IPFS daemon to start'
          command: wget --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data '' "http://localhost:5001/api/v0/version"

      - run: ipfs add --progress=true --pin=true --recursive "<< parameters.source-dir >>"
      - run:
          name: 'Save IPFS_CID'
          command: |
            export IPFS_CID=$(ipfs add --progress=false --pin=true --recursive --quieter "<< parameters.source-dir >>")
            echo $IPFS_CID
            echo "export IPFS_CID=$IPFS_CID" >> $BASH_ENV
      - run:
          name: 'Pin to the remote IPFS node'
          command: curl --silent --request POST --user "$IPFS_USER:$IPFS_PASS" "<< parameters.ipfs-api >>/pin/add?recursive=true&progress=true&arg=$IPFS_CID"
      - run:
          name: 'Publish IPFS_CID to IPNS key << parameters.ipns-key >>'
          command: |
            curl --silent --request POST --user "$IPFS_USER:$IPFS_PASS" "<< parameters.ipfs-api >>/name/publish?key=<< parameters.ipns-key >>&arg=$IPFS_CID" | tee /tmp/name-publish-$IPFS_CID.log
            cat /tmp/name-publish-$IPFS_CID.log | jq
      - run:
          name: 'Pin to Synthetix IPFS cluster'
          command: |
            curl --silent --request POST --user "$IPFS_USER:$IPFS_PASS" "<< parameters.ipfs-cluster-api >>/pin/add?arg=$IPFS_CID" | tee /tmp/pin-add-$IPFS_CID.log
            cat /tmp/pin-add-$IPFS_CID.log | jq

jobs:
  checks:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: yarn npm audit
      - run: yarn dedupe --check
      - run: yarn deps
      - run: yarn deps:mismatched
      - run: yarn deps:circular
      - run: yarn pretty
      - run: yarn lint

  tests:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: NODE_ENV=test yarn test --coverage --coverageReporters=json --reporters=jest-junit --runInBand
      - store_test_results:
          path: './junit.xml'
      - store_artifacts:
          path: 'coverage'

  typecheck:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run:
          name: Build
          command: |-
            yarn workspaces foreach --topological-dev --verbose --no-private run build
            # codegen is part of build, so ensure we have all the autogenerated code committed
            git diff --name-only --exit-code
      - run: yarn typecheck

  liquidity-e2e:
    parameters:
      chain:
        type: string
    working_directory: /tmp/app
    docker:
      - image: cypress/included:<< pipeline.parameters.cypress-version >>
    resource_class: large
    environment:
      NODE_ENV: test
    steps:
      - checkout
      - install-foundry
      - yarn-install

      - run:
          name: Run server localhost:3000
          working_directory: /tmp/app/liquidity/ui
          command: yarn start
          background: true

      - run:
          name: Run anvil localhost:8545
          command: anvil --fork-url https://<< parameters.chain >>.infura.io/v3/$INFURA_KEY
          background: true

      - run:
          name: Wait for server localhost:3000
          command: wget --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 http://localhost:3000

      - run:
          name: Wait for anvil localhost:8545
          command: wget -q -O - --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data='{"method":"eth_chainId","params":[],"id":1,"jsonrpc":"2.0"}' --header='Content-Type:application/json' http://localhost:8545

      - run:
          working_directory: /tmp/app/liquidity/cypress
          command: cypress run --e2e --browser chrome

      - store_test_results:
          path: 'liquidity/cypress/cypress/reports'

      - store_artifacts:
          path: 'liquidity/cypress/.nyc_output'
          destination: 'coverage'

      - store_artifacts:
          path: 'liquidity/cypress/cypress/screenshots'
          destination: 'screenshots'

      - store_artifacts:
          path: 'liquidity/cypress/cypress/videos'
          destination: 'videos'

  liquidity-cy:
    working_directory: /tmp/app
    docker:
      - image: cypress/included:<< pipeline.parameters.cypress-version >>
    environment:
      NODE_ENV: test
    steps:
      - checkout
      - yarn-install

      - run:
          working_directory: /tmp/app/liquidity/cypress
          command: cypress run --component --browser chrome

      - store_test_results:
          path: 'liquidity/cypress/cypress/reports'

      - store_artifacts:
          path: 'liquidity/cypress/.nyc_output'
          destination: 'coverage'

      - store_artifacts:
          path: 'liquidity/cypress/cypress/screenshots'
          destination: 'screenshots'

      - store_artifacts:
          path: 'liquidity/cypress/cypress/videos'
          destination: 'videos'

  combine-coverage:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: rm -rf /tmp/cov
      - run: yarn download-cci-coverage tests /tmp/cov || true
      - run: yarn download-cci-coverage liquidity-cy /tmp/cov || true
      - run: yarn download-cci-coverage liquidity-e2e-optimism-mainnet /tmp/cov || true
      - run: mkdir -p /tmp/cov
      - run: ls -alR /tmp/cov
      - run: mkdir -p /tmp/cov/combined
      - run: yarn nyc merge /tmp/cov /tmp/cov/combined/coverage.json || true
      - run: |-
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t ${CODECOV_TOKEN} --file /tmp/cov/combined/coverage.json

  liquidity-ipfs:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    resource_class: large
    steps:
      - checkout
      - yarn-install
      - run: yarn workspace @snx-v3/liquidity build
      - ipfs-deploy:
          source-dir: './liquidity/ui/dist'
          ipfs-api: 'https://ipfs.synthetix.io:5001/api/v0'
          ipfs-cluster-api: 'https://ipfs.synthetix.io/api/v0'
          ipns-key: 'v3.synthetix.eth'

workflows:
  ui:
    unless:
      or:
        - equal: ['skip-tests', << pipeline.git.branch >>]

    jobs:
      - checks
      - typecheck
      - tests
      - liquidity-cy
      - liquidity-e2e:
          chain: optimism-mainnet
          name: liquidity-e2e-optimism-mainnet
      - liquidity-e2e:
          chain: optimism-goerli
          name: liquidity-e2e-optimism-goerli
      - liquidity-e2e:
          chain: goerli
          name: liquidity-e2e-goerli
      - combine-coverage:
          requires: [tests, liquidity-cy, liquidity-e2e-optimism-mainnet]
      - liquidity-ipfs:
          requires:
            - checks
            - typecheck
            - tests
            - liquidity-cy
            - liquidity-e2e-optimism-mainnet
            - liquidity-e2e-optimism-goerli
            - liquidity-e2e-goerli
          filters:
            branches:
              only:
                - release
                - master
                - ipfs-deploy
